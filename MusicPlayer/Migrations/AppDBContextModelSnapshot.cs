// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicPlayer.Data;

#nullable disable

namespace MusicPlayer.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicPlayer.Models.Cancion", b =>
                {
                    b.Property<int>("CancionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancionID"));

                    b.Property<string>("Artista")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DuracionSegundos")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("datetime2");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CancionID");

                    b.ToTable("Cancion", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.Favorito", b =>
                {
                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.Property<int>("CancionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("datetime2");

                    b.HasKey("UsuarioID", "CancionID");

                    b.HasIndex("CancionID");

                    b.ToTable("Favorito", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.HistorialReproduccion", b =>
                {
                    b.Property<int>("HistorialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistorialID"));

                    b.Property<int>("CancionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaReproduccion")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("HistorialID");

                    b.HasIndex("CancionID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("HistorialReproduccion", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistID"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("PlaylistID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistAleatoria", b =>
                {
                    b.Property<int>("PlaylistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistID"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PlaylistID");

                    b.ToTable("PlaylistAleatoria", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistAleatoriaCancion", b =>
                {
                    b.Property<int>("PlaylistID")
                        .HasColumnType("int");

                    b.Property<int>("CancionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("datetime2");

                    b.HasKey("PlaylistID", "CancionID");

                    b.HasIndex("CancionID");

                    b.ToTable("PlaylistAleatoriaCancion", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistCancion", b =>
                {
                    b.Property<int>("PlaylistID")
                        .HasColumnType("int");

                    b.Property<int>("CancionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("datetime2");

                    b.HasKey("PlaylistID", "CancionID");

                    b.HasIndex("CancionID");

                    b.ToTable("PlaylistCancion", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UsuarioID");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("MusicPlayer.Models.Favorito", b =>
                {
                    b.HasOne("MusicPlayer.Models.Cancion", "Cancion")
                        .WithMany("Favoritos")
                        .HasForeignKey("CancionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Usuario", "Usuario")
                        .WithMany("Favoritos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cancion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MusicPlayer.Models.HistorialReproduccion", b =>
                {
                    b.HasOne("MusicPlayer.Models.Cancion", "Cancion")
                        .WithMany("HistorialReproduccion")
                        .HasForeignKey("CancionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Usuario", "Usuario")
                        .WithMany("HistorialReproduccion")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cancion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MusicPlayer.Models.Playlist", b =>
                {
                    b.HasOne("MusicPlayer.Models.Usuario", "Usuario")
                        .WithMany("Playlists")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistAleatoriaCancion", b =>
                {
                    b.HasOne("MusicPlayer.Models.Cancion", "Cancion")
                        .WithMany("PlaylistAleatoriaCanciones")
                        .HasForeignKey("CancionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.PlaylistAleatoria", "PlaylistAleatoria")
                        .WithMany("PlaylistAleatoriaCanciones")
                        .HasForeignKey("PlaylistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cancion");

                    b.Navigation("PlaylistAleatoria");
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistCancion", b =>
                {
                    b.HasOne("MusicPlayer.Models.Cancion", "Cancion")
                        .WithMany("PlaylistCanciones")
                        .HasForeignKey("CancionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Models.Playlist", "Playlist")
                        .WithMany("PlaylistCanciones")
                        .HasForeignKey("PlaylistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cancion");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("MusicPlayer.Models.Cancion", b =>
                {
                    b.Navigation("Favoritos");

                    b.Navigation("HistorialReproduccion");

                    b.Navigation("PlaylistAleatoriaCanciones");

                    b.Navigation("PlaylistCanciones");
                });

            modelBuilder.Entity("MusicPlayer.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistCanciones");
                });

            modelBuilder.Entity("MusicPlayer.Models.PlaylistAleatoria", b =>
                {
                    b.Navigation("PlaylistAleatoriaCanciones");
                });

            modelBuilder.Entity("MusicPlayer.Models.Usuario", b =>
                {
                    b.Navigation("Favoritos");

                    b.Navigation("HistorialReproduccion");

                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
